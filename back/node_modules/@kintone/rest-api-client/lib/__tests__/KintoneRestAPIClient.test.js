"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var KintoneRestAPIClient_1 = require("../KintoneRestAPIClient");
var platform_1 = require("../platform");
var browserDeps = __importStar(require("../platform/browser"));
describe("KintoneRestAPIClient", function () {
    describe("constructor", function () {
        var originalKintone;
        var originalLocation;
        beforeEach(function () {
            originalKintone = global.kintone;
            originalLocation = global.location;
            global.kintone = {
                getRequestToken: function () { return "dummy request token"; },
            };
            global.location = {
                host: "example.com",
                protocol: "https:",
            };
        });
        afterEach(function () {
            global.kintone = originalKintone;
            global.location = originalLocation;
        });
        describe("Header", function () {
            var baseUrl = "https://example.com";
            it("should use a location object in browser environment if baseUrl param is not specified", function () {
                platform_1.injectPlatformDeps(browserDeps);
                var client = new KintoneRestAPIClient_1.KintoneRestAPIClient();
                expect(client.getBaseUrl()).toBe("https://example.com");
            });
            it("should raise an error in Node.js environment if baseUrl param is not specified", function () {
                var USERNAME = "user";
                var PASSWORD = "password";
                var auth = {
                    username: USERNAME,
                    password: PASSWORD,
                };
                expect(function () { return new KintoneRestAPIClient_1.KintoneRestAPIClient({ auth: auth }); }).toThrow("in Node.js environment, baseUrl is required");
            });
            it("should raise an error if trying to use session auth in Node.js environment", function () {
                expect(function () {
                    new KintoneRestAPIClient_1.KintoneRestAPIClient({
                        baseUrl: baseUrl,
                    });
                }).toThrow("session authentication is not supported in Node.js environment.");
            });
        });
    });
    describe("version", function () {
        it("should provide this library version", function () {
            expect(KintoneRestAPIClient_1.KintoneRestAPIClient.version).toBe(require("../../package.json").version);
        });
    });
});
//# sourceMappingURL=KintoneRestAPIClient.test.js.map