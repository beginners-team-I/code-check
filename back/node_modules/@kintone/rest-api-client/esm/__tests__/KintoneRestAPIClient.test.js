import { KintoneRestAPIClient } from "../KintoneRestAPIClient";
import { injectPlatformDeps } from "../platform";
import * as browserDeps from "../platform/browser";
describe("KintoneRestAPIClient", function () {
    describe("constructor", function () {
        var originalKintone;
        var originalLocation;
        beforeEach(function () {
            originalKintone = global.kintone;
            originalLocation = global.location;
            global.kintone = {
                getRequestToken: function () { return "dummy request token"; },
            };
            global.location = {
                host: "example.com",
                protocol: "https:",
            };
        });
        afterEach(function () {
            global.kintone = originalKintone;
            global.location = originalLocation;
        });
        describe("Header", function () {
            var baseUrl = "https://example.com";
            it("should use a location object in browser environment if baseUrl param is not specified", function () {
                injectPlatformDeps(browserDeps);
                var client = new KintoneRestAPIClient();
                expect(client.getBaseUrl()).toBe("https://example.com");
            });
            it("should raise an error in Node.js environment if baseUrl param is not specified", function () {
                var USERNAME = "user";
                var PASSWORD = "password";
                var auth = {
                    username: USERNAME,
                    password: PASSWORD,
                };
                expect(function () { return new KintoneRestAPIClient({ auth: auth }); }).toThrow("in Node.js environment, baseUrl is required");
            });
            it("should raise an error if trying to use session auth in Node.js environment", function () {
                expect(function () {
                    new KintoneRestAPIClient({
                        baseUrl: baseUrl,
                    });
                }).toThrow("session authentication is not supported in Node.js environment.");
            });
        });
    });
    describe("version", function () {
        it("should provide this library version", function () {
            expect(KintoneRestAPIClient.version).toBe(require("../../package.json").version);
        });
    });
});
//# sourceMappingURL=KintoneRestAPIClient.test.js.map